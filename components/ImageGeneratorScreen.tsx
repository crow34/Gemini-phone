import React, { useState } from 'react';
import { GoogleGenAI } from '@google/genai';

interface ImageGeneratorScreenProps {
  onBack: () => void;
  ai: GoogleGenAI;
}

// Icons
const BackArrowIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" /></svg>;
const SparklesIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor"><path fillRule="evenodd" d="M5 2a1 1 0 011 1v1h1a1 1 0 010 2H6v1a1 1 0 01-2 0V6H3a1 1 0 010-2h1V3a1 1 0 011-1zm6 2a1 1 0 011 1v1h1a1 1 0 010 2h-1v1a1 1 0 01-2 0V6h-1a1 1 0 010-2h1V3a1 1 0 011-1zm6 6a1 1 0 011 1v1h1a1 1 0 010 2h-1v1a1 1 0 01-2 0v-1h-1a1 1 0 010-2h1v-1a1 1 0 011-1zM6 13a1 1 0 011 1v1h1a1 1 0 010 2H7v1a1 1 0 01-2 0v-1H4a1 1 0 010-2h1v-1a1 1 0 011-1z" clipRule="evenodd" /></svg>;
const PhotosAppIcon = () => (
    <div className="w-20 h-20 bg-blue-500 rounded-3xl flex items-center justify-center shadow-lg mb-4">
        <svg xmlns="http://www.w3.org/2000/svg" className="h-14 w-14 text-white" viewBox="0 0 20 20" fill="currentColor">
        <path fillRule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" clipRule="evenodd" />
        </svg>
    </div>
);

const ImageGeneratorScreen: React.FC<ImageGeneratorScreenProps> = ({ onBack, ai }) => {
  const [prompt, setPrompt] = useState('');
  const [imageUrl, setImageUrl] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!prompt.trim() || isLoading) return;

    setIsLoading(true);
    setImageUrl(null);
    setError(null);

    try {
      const response = await ai.models.generateImages({
        model: 'imagen-4.0-generate-001',
        prompt: prompt,
        config: {
          numberOfImages: 1,
          outputMimeType: 'image/jpeg',
          aspectRatio: '1:1',
        },
      });

      const base64ImageBytes = response.generatedImages[0].image.imageBytes;
      const url = `data:image/jpeg;base64,${base64ImageBytes}`;
      setImageUrl(url);

    } catch (err) {
      console.error("Image generation error:", err);
      setError("Failed to generate image. Please try a different prompt.");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="bg-gray-800 text-white h-full flex flex-col">
      <header className="flex items-center p-3 border-b border-gray-700 bg-gray-900 z-10">
        <button onClick={onBack} className="mr-3 p-1 rounded-full hover:bg-gray-700"><BackArrowIcon /></button>
        <h1 className="text-xl font-bold">AI Photos</h1>
      </header>

      <main className="flex-grow flex flex-col p-4 overflow-y-auto">
        <div className={`flex-grow flex items-center justify-center transition-all duration-300 ${imageUrl || isLoading ? 'mb-4' : 'mb-0'}`}>
          {isLoading && (
            <div className="w-full aspect-square bg-gray-700 rounded-lg flex flex-col items-center justify-center">
              <div className="w-8 h-8 border-4 border-blue-400 border-t-transparent rounded-full animate-spin"></div>
              <p className="mt-4 text-gray-300">Generating...</p>
            </div>
          )}
          {error && !isLoading && (
            <div className="w-full aspect-square bg-red-900/50 border border-red-700 rounded-lg flex items-center justify-center p-4">
              <p className="text-center text-red-300">{error}</p>
            </div>
          )}
          {imageUrl && !isLoading && (
            <img src={imageUrl} alt="Generated by AI" className="w-full aspect-square object-contain rounded-lg shadow-lg" />
          )}
          {!imageUrl && !isLoading && !error && (
            <div className="text-center text-gray-400">
                <PhotosAppIcon />
                <h2 className="text-2xl font-bold text-white">Image Studio</h2>
                <p>Describe anything you can imagine.</p>
            </div>
          )}
        </div>
        
        <form onSubmit={handleSubmit} className="mt-auto">
          <label htmlFor="prompt" className="block text-sm font-medium text-gray-300 mb-2">Prompt</label>
          <textarea
            id="prompt"
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            rows={3}
            className="w-full bg-gray-700 rounded-md py-2 px-3 focus:outline-none focus:ring-2 focus:ring-blue-500 placeholder-gray-400"
            placeholder="e.g., A photo of an astronaut riding a horse on Mars"
            disabled={isLoading}
          />
          <button
            type="submit"
            className="mt-3 w-full flex items-center justify-center bg-blue-600 hover:bg-blue-500 rounded-md py-3 px-4 font-bold transition-colors disabled:bg-gray-600"
            disabled={isLoading || !prompt.trim()}
          >
            <SparklesIcon />
            Generate
          </button>
        </form>
      </main>
    </div>
  );
};

export default ImageGeneratorScreen;
